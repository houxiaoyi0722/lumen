logging:
  level:
    io:
      ebean:
        SQL: DEBUG
        TXN: DEBUG
jwt:
  private.key: classpath:app.key
  public.key: classpath:app.pub
  expire: 3600
  refresh-expiry: 72000
minio:
  credentials: classpath:credentials.json
  bucket:
    master: my-first-bucket
    second: my-second-bucket
spring:
  application:
    name: lumen
  profiles:
    active: gs
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 100MB
  redis:
    database: 0
    port: 6379
    host: 127.0.0.1
    #    password:
    timeout: 2000
    jedis:
      pool:
        max-active: 50
        max-idle: 50
        min-idle: 0
        max-wait: 2000
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
    default-property-inclusion: non_null
  quartz:
    scheduler-name: clusteredScheduler # Scheduler 名字。默认为 schedulerName
    job-store-type: jdbc # Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库。
    auto-startup: true # Quartz 是否自动启动
    startup-delay: 0 # 延迟 N 秒启动
    wait-for-jobs-to-complete-on-shutdown: true # 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
    overwrite-existing-jobs: false # 是否覆盖已有 Job 的配置
    properties: # 添加 Quartz Scheduler 附加属性，更多可以看 http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html 文档
      org:
        quartz:
          # JobStore 相关配置
          jobStore:
            # 数据源名称
            dataSource: hikariDataSource # 使用的数据源
#            class: org.quartz.impl.jdbcjobstore.JobStoreTX # JobStore 实现类/使用spring默认实现注释掉，否则会导致找不到数据源（未执行put数据源的操作）
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_ # Quartz 表前缀
            isClustered: false # 是集群模式
            clusterCheckinInterval: 1000
            useProperties: false
          # 线程池相关配置
          threadPool:
            threadCount: 25 # 线程池大小。默认为 10 。
            threadPriority: 5 # 线程优先级
            class: org.quartz.simpl.SimpleThreadPool # 线程池类型
    jdbc: # 使用 JDBC 的 JobStore 的时候，JDBC 的配置
      initialize-schema: embedded # 是否自动使用 SQL 初始化 Quartz 表结构。这里设置成 never/always ，我们手动创建表结构。
management:
  endpoints:
    # Actuator HTTP 配置项，对应 WebEndpointProperties 配置类
    web:
      exposure:
        include: '*' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。
  metrics:
    tags: # 通用标签
      application: ${spring.application.name}

#rocketmq:
#  #  name-server: 47.103.123.107:31303
#  name-server: localhost:9876
#  producer:
#    group: ${spring.application.name}
#    send-message-timeout: 15000 #生产者发送消息超时时间,默认3s
#    compress-message-body-threshold: 4096 #生产者消息压缩大小,默认达到4KB启用消息压缩
#    max-message-size: 4194304 #生产者发送消息最大字节数,默认4MB
#    retry-times-when-send-async-failed: 0 #生产者发送异步消息失败后重试次数,默认0次
#    retry-next-server: true #生产者消息失败容错策略,默认false不开启,生产环境建议开启
#    retry-times-when-send-failed: 2 #生产者发送同步消息失败后重试次数,默认2次
